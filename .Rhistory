fit_did
fit_did <- lm(citation_rank ~ switcher + transited, data = data_did)
fit_did %>% summary()
fit_did_base <- lm(citation_rank ~ switcher + transited + gender, data = data_did)
fit_did_base %>% summary()
fit_did_1 <- lm(citation_rank ~ switcher + transited + gender + seniority, data = data_did)
fit_did_1 %>% summary()
fit_did_1 <- lm(citation_rank ~ switcher + transited + seniority, data = data_did)
fit_did_1 %>% summary()
data_did <- data_surv %>%
group_by(author_id) %>%
mutate(switcher = max(transited),
transited_t = ifelse(transited == TRUE, 1, 0)) %>%
mutate(transited_t = transited_t + lag(transited_t, 1)) %>%
ungroup()
fit_did_1 <- lm(citation_rank ~ switcher + transited + transited_t + seniority, data = data_did)
fit_did_1 %>% summary()
View(data_did)
fit_did_base <- lm(citation_rank ~ switcher + transited + seniority, data = data_did)
fit_did_base %>% summary()
fit_did_1 <- lm(citation_rank ~ switcher + transited + transited_t + seniority, data = data_did)
fit_did_1 %>% summary()
fit_did_1 <- lm(citation_rank ~ switcher + transited + transited_t + seniority + del_researcher, data = data_did)
fit_did_1 <- lm(citation_rank ~ switcher + transited + transited_t + seniority + dl_researcher, data = data_did)
fit_did_1 %>% summary()
fit_did_1 <- lm(citation_rank ~ switcher + transited + transited_t + seniority + (dl_researcher + transited_t)^2, data = data_did)
fit_did_1 %>% summary()
install.packages("interactions")
# Knitr options
### Generic preamble
Sys.setenv(LANG = "en") # For english language
options(scipen = 5) # To deactivate annoying scientific number notation
# rm(list=ls()); graphics.off() # get rid of everything in the workspace
if (!require("knitr")) install.packages("knitr"); library(knitr) # For display of the markdown
### Knitr options
knitr::opts_chunk$set(warning=FALSE,
message=FALSE,
fig.align="center"
)
library(DBI) # GEneral R database interface
library(RPostgres) # PostgreSQL interface driver
library(dbplyr) # for dplyr with databases
### Database connection
# set up connection to existing PostgreSQL database, just plug in own details
con <- dbConnect(drv = RPostgres::Postgres(),
dbname = "patentdb",
host = "130.225.57.105", port = 5432,
user = "patentdbowner", password = "e6rKPT2iZ99@PKaa")
### Define functions
corstarsl <- function(x){
require(Hmisc)
x <- as.matrix(x)
R <- rcorr(x)$r
p <- rcorr(x)$P
## define notions for significance levels; spacing is important.
mystars <- ifelse(p < .001, "*", " ")
## trunctuate the matrix that holds the correlations to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
## remove last column and return the matrix (which is now a data frame)
Rnew <- cbind(Rnew[1:length(Rnew)-1])
return(Rnew)
}
library(interactions)
install.packages("interplot")
fit_did_1 %>% interplot(var1 ="transited", var2 = "transited_t", hist=F)
library(interplot)
#library(interactions)
fit_did_1 %>% interplot(var1 ="transited", var2 = "transited_t", hist=F)
fit_did_1 <- lm(citation_rank ~ switcher + (transited + transited_t) + seniority + (dl_researcher + transited_t)^2, data = data_did)
fit_did_1 %>% summary()
fit_did_1 <- lm(citation_rank ~ switcher + (transited + transited_t) + seniority + (dl_researcher + transited_t)^2, data = data_did)
fit_did_1 %>% summary()
fit_did_1 %>% interplot(var1 ="transited", var2 = "transited_t", hist=F)
fit_did_1 <- lm(citation_rank ~ switcher + (transited + transited_t) + seniority + (dl_researcher + transited_t)^2, data = data_did)
fit_did_1 %>% summary()
fit_did_1 <- lm(citation_rank ~ switcher + (transited + transited_t)^2 + seniority + (dl_researcher + transited_t)^2, data = data_did)
fit_did_1 %>% summary()
fit_did_1 %>% interplot(var1 ="transited", var2 = "transited_t", hist=F)
fit_did_1 <- lm(citation_rank ~ (switcher  + transited_t)^2 + seniority + (dl_researcher + transited_t)^2, data = data_did)
fit_did_1 %>% summary()
library(interplot)
#library(interactions)
fit_did_1 %>% interplot(var1 ="transited", var2 = "transited_t", hist=F)
fit_did_1 %>% interplot(var1 ="switcher", var2 = "transited_t", hist=F)
fit_did_1 <- lm(citation_rank ~ switcher  + seniority + (dl_researcher + transited_t)^2, data = data_did)
fit_did_1 %>% summary()
fit_did_base <- lm(citation_rank ~ switcher + transited + seniority, data = data_did)
fit_did_base %>% summary()
fit_did_blank <- lm(citation_rank ~ switcher, data = data_did)
fit_did_blank %>% summary()
fit_did_base <- lm(citation_rank ~ switcher + transited + seniority, data = data_did)
fit_did_base %>% summary()
fit_did_1 <- lm(citation_rank ~ switcher  + seniority + (dl_researcher + transited_t)^2, data = data_did)
fit_did_1 %>% summary()
fit_did_1 <- lm(citation_rank ~ switcher  + transited + seniority + transited_t, data = data_did)
fit_did_1 %>% summary()
fit_did_1 <- lm(citation_rank ~ switcher  + transited + seniority + transited_t + field_of_study_name, data = data_did)
fit_did_1 %>% summary()
fit_did_1 <- lm(citation_rank ~ switcher  + transited + seniority + transited_t + dl_researcher + gender +field_of_study_name, data = data_did)
fit_did_1 %>% summary()
fit_did_1 <- lm(citation_rank ~ switcher  + transited + seniority + (transited_t + dl_researcher)^2 + gender +field_of_study_name, data = data_did)
fit_did_1 %>% summary()
fit_did_1 <- lm(citation_rank ~ switcher  + (transited + dl_researcher)^2 seniority + transited_t + dl_researcher + gender +field_of_study_name, data = data_did)
fit_did_1 <- lm(citation_rank ~ switcher  + (transited + dl_researcher)^2 + seniority + transited_t + dl_researcher + gender +field_of_study_name, data = data_did)
fit_did_1 %>% summary()
# Knitr options
### Generic preamble
rm(list = ls())
Sys.setenv(LANG = "en") # For english language
options(scipen = 5) # To deactivate annoying scientific number notation
# rm(list=ls()); graphics.off() # get rid of everything in the workspace
if (!require("knitr")) install.packages("knitr"); library(knitr) # For display of the markdown
### Knitr options
knitr::opts_chunk$set(warning=FALSE,
message=FALSE,
fig.align="center"
)
library(DBI) # GEneral R database interface
library(RPostgres) # PostgreSQL interface driver
library(dbplyr) # for dplyr with databases
### Database connection
# set up connection to existing PostgreSQL database, just plug in own details
con <- dbConnect(drv = RPostgres::Postgres(),
dbname = "patentdb",
host = "130.225.57.105", port = 5432,
user = "patentdbowner", password = "e6rKPT2iZ99@PKaa")
### Load packages
library(tidyverse) # Collection of all the good stuff like dplyr, ggplot2 ect.
library(magrittr) # For extra-piping operators (eg. %<>%)
# Descriptives
library(skimr)
library(stargazer)
# Viz
library(patchwork)
tbl_affiliation_dyn <- readRDS('../../temp/tbl_institutions_main_indicators.rds')
tbl_affiliation_dyn %>% glimpse()
tbl_author_stat <- readRDS('../../temp/tbl_author_type.rds')
# Insert gender
tbl_author_stat %<>%
left_join(tbl(con, "author_gender") %>% select(id, full_name, gender), by = c('author_id' = 'id'), copy = TRUE) %>%
replace_na(list(gender = 'male')) %>% # Strong assumption to get rid of NAs
mutate(gender = ifelse(gender == 'male', TRUE, FALSE)) # Coded logical, where male = 1
tbl_author_stat %>% skim()
tbl_author_dyn <- readRDS('../../temp/tbl_author_dyn_all.rds')
# deal with NAs
tbl_author_dyn %<>%
replace_na(list(cent_dgr = 0, cent_dgr_ind = 0, field_of_study_id = 0, field_of_study_name = 'none', field_n = 0, dl_n = 0, dl_researcher = FALSE))
tbl_author_dyn %>% head(100)
tbl_author_paper <- readRDS('../../temp/tbl_author_paper.rds')
tbl_author_paper %>% glimpse()
tbl_author_inst_year <- tbl_author_paper %>%
count(author_id, year, affiliation_id, type) %>%
group_by(author_id, year) %>%
arrange(desc(n)) %>%
slice(1) %>%
ungroup()
tbl_author_inst_year %>% head()
tbl_transitions <- tbl_author_inst_year %>%
select(-n) %>%
group_by(author_id) %>%
arrange(year) %>%
mutate(ui_switch = type != lag(type)) %>%
filter(ui_switch == TRUE | lead(ui_switch == TRUE)) %>%
ungroup() %>%
arrange(author_id, year)
tbl_transitions %<>%
select(author_id, year, affiliation_id, ui_switch) %>%
group_by(author_id) %>%
mutate(affil_id_from = lag(affiliation_id, 1)) %>%
ungroup() %>%
filter(ui_switch == TRUE) %>%
rename(affil_id_to = affiliation_id) %>%
left_join(tbl(con, "mag_affiliation"), by = c('affil_id_from' = 'id'), copy = TRUE ) %>%
left_join(tbl(con, "mag_affiliation"), by = c('affil_id_to' = 'id'), copy = TRUE ) %>%
left_join(tbl(con, "mag_authors"), by = c('author_id' = 'id'), copy = TRUE ) %>%
rename(author_name = name,
affil_name_from = affiliation.x,
affil_name_to = affiliation.y) %>%
select(author_id, author_name, year, affil_id_from, affil_name_from, affil_id_to, affil_name_to)
tbl_transitions %>% write_csv('../../temp/tbl_transitions.csv')
tbl_transitions %>% write_csv('../../temp/tbl_transitions.csv')
View(tbl_transitions)
tbl_transitions <- tbl_author_inst_year %>%
select(-n) %>%
group_by(author_id) %>%
arrange(year) %>%
mutate(ui_switch = affiliation_id != lag(affiliation_id)) %>%
filter(ui_switch == TRUE | lead(ui_switch == TRUE)) %>%
ungroup() %>%
arrange(author_id, year)
tbl(con, "mag_affiliation"),
tbl(con, "mag_affiliation")
db_list_tables(con) %>% sort()
tbl(con, "affiliation_type")
tbl_transitions %<>%
select(author_id, year, affiliation_id, ui_switch) %>%
group_by(author_id) %>%
mutate(affil_id_from = lag(affiliation_id, 1)) %>%
ungroup() %>%
filter(ui_switch == TRUE) %>%
rename(affil_id_to = affiliation_id) %>%
left_join(tbl(con, "mag_affiliation"), by = c('affil_id_from' = 'id'), copy = TRUE ) %>%
left_join(tbl(con, "mag_affiliation"), by = c('affil_id_to' = 'id'), copy = TRUE ) %>%
left_join(bl(con, "affiliation_type"), by = c('affil_id_from' = 'id'), copy = TRUE ) %>%
left_join(bl(con, "affiliation_type"), by = c('affil_id_from' = 'id'), copy = TRUE ) %>%
left_join(tbl(con, "mag_authors"), by = c('author_id' = 'id'), copy = TRUE ) %>%
rename(author_name = name,
affil_name_from = affiliation.x,
affil_name_to = affiliation.y,
affil_type_from = type.x,
affil_type_to = type.y) %>%
select(author_id, author_name, year, affil_id_from, affil_name_from, affil_type_from,  affil_id_to, affil_name_to, affil_type_to)
tbl_transitions %<>%
select(author_id, year, affiliation_id, ui_switch) %>%
group_by(author_id) %>%
mutate(affil_id_from = lag(affiliation_id, 1)) %>%
ungroup() %>%
filter(ui_switch == TRUE) %>%
rename(affil_id_to = affiliation_id) %>%
left_join(tbl(con, "mag_affiliation"), by = c('affil_id_from' = 'id'), copy = TRUE ) %>%
left_join(tbl(con, "mag_affiliation"), by = c('affil_id_to' = 'id'), copy = TRUE ) %>%
left_join(tbl(con, "affiliation_type"), by = c('affil_id_from' = 'id'), copy = TRUE ) %>%
left_join(tbl(con, "affiliation_type"), by = c('affil_id_from' = 'id'), copy = TRUE ) %>%
left_join(tbl(con, "mag_authors"), by = c('author_id' = 'id'), copy = TRUE ) %>%
rename(author_name = name,
affil_name_from = affiliation.x,
affil_name_to = affiliation.y,
affil_type_from = type.x,
affil_type_to = type.y) %>%
select(author_id, author_name, year, affil_id_from, affil_name_from, affil_type_from,  affil_id_to, affil_name_to, affil_type_to)
tbl_transitions %>% write_csv('../../temp/tbl_transitions.csv')
tbl_transitions %>% write_csv('../../temp/tbl_transitions.csv')
View(tbl_transitions)
tbl_transitions %>%
filter(affil_type_from != affil_id_to)
tbl_transitions %>%
filter(affil_type_from != affil_type_to)
tbl_transitions <- tbl_author_inst_year %>%
select(-n) %>%
group_by(author_id) %>%
arrange(year) %>%
mutate(ui_switch = affiliation_id != lag(affiliation_id)) %>%
filter(ui_switch == TRUE | lead(ui_switch == TRUE)) %>%
ungroup() %>%
arrange(author_id, year)
tbl_transitions %<>%
select(author_id, year, affiliation_id, ui_switch) %>%
group_by(author_id) %>%
mutate(affil_id_from = lag(affiliation_id, 1)) %>%
ungroup() %>%
filter(ui_switch == TRUE) %>%
rename(affil_id_to = affiliation_id) %>%
left_join(tbl(con, "mag_affiliation"), by = c('affil_id_from' = 'id'), copy = TRUE ) %>%
left_join(tbl(con, "mag_affiliation"), by = c('affil_id_to' = 'id'), copy = TRUE ) %>%
left_join(tbl(con, "affiliation_type"), by = c('affil_id_from' = 'id'), copy = TRUE ) %>%
left_join(tbl(con, "affiliation_type"), by = c('affil_id_to' = 'id'), copy = TRUE ) %>%
left_join(tbl(con, "mag_authors"), by = c('author_id' = 'id'), copy = TRUE ) %>%
rename(author_name = name,
affil_name_from = affiliation.x,
affil_name_to = affiliation.y,
affil_type_from = type.x,
affil_type_to = type.y) %>%
select(author_id, author_name, year, affil_id_from, affil_name_from, affil_type_from,  affil_id_to, affil_name_to, affil_type_to)
tbl_transitions %>% write_csv('../../temp/tbl_transitions.csv')
tbl_transitions %>%
filter(affil_type_from != affil_type_to)
# Knitr options
### Generic preamble
Sys.setenv(LANG = "en") # For english language
options(scipen = 5) # To deactivate annoying scientific number notation
# rm(list=ls()); graphics.off() # get rid of everything in the workspace
if (!require("knitr")) install.packages("knitr"); library(knitr) # For display of the markdown
### Knitr options
knitr::opts_chunk$set(warning=FALSE,
message=FALSE,
fig.align="center"
)
library(DBI) # GEneral R database interface
library(RPostgres) # PostgreSQL interface driver
library(dbplyr) # for dplyr with databases
### Database connection
# set up connection to existing PostgreSQL database, just plug in own details
con <- dbConnect(drv = RPostgres::Postgres(),
dbname = "patentdb",
host = "130.225.57.105", port = 5432,
user = "patentdbowner", password = "e6rKPT2iZ99@PKaa")
### Define functions
corstarsl <- function(x){
require(Hmisc)
x <- as.matrix(x)
R <- rcorr(x)$r
p <- rcorr(x)$P
## define notions for significance levels; spacing is important.
mystars <- ifelse(p < .001, "*", " ")
## trunctuate the matrix that holds the correlations to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
## remove last column and return the matrix (which is now a data frame)
Rnew <- cbind(Rnew[1:length(Rnew)-1])
return(Rnew)
}
### Load packages
library(tidyverse) # Collection of all the good stuff like dplyr, ggplot2 ect.
library(magrittr) # For extra-piping operators (eg. %<>%)
# Suvival
library(survival)
library(survminer)
library(ggfortify)
# Descriptives
library(skimr)
library(stargazer)
# Viz
library(patchwork)
tbl_affiliation_dyn <- readRDS('../../temp/tbl_institutions_main_indicators.rds')
tbl_affiliation_dyn %>% skim()
tbl_author_stat <- readRDS('../../temp/tbl_author_type.rds')
# Filter only for author types interesting here
tbl_author_stat %<>%
filter(author_type %in% c('academia', 'switcher') &
year_n >= 5 &
year_end >= 2015)
# Insert gender
tbl_author_stat %<>%
left_join(tbl(con, "author_gender") %>% select(id, full_name, gender), by = c('author_id' = 'id'), copy = TRUE) %>%
replace_na(list(gender = 'male')) %>% # Strong assumption to get rid of NAs
mutate(gender = ifelse(gender == 'male', TRUE, FALSE)) # Coded logical, where male = 1
tbl_author_stat %>% skim()
tbl_author_stat %>%
as.data.frame() %>%
select(-author_id) %>%
stargazer(type = "html")
tbl_author_dyn <- readRDS('../../temp/tbl_author_dyn_all.rds')
# deal with NAs
tbl_author_dyn %<>%
replace_na(list(cent_dgr = 0, cent_dgr_ind = 0, field_of_study_id = 0, field_of_study_name = 'none', field_n = 0, dl_n = 0, dl_researcher = FALSE))
tbl_author_dyn %>% head(100)
fos_main <- tbl_author_dyn %>% count(field_of_study_name, sort = TRUE)
fos_main
tbl_author_dyn %<>%
mutate(field_of_study_name = ifelse(field_of_study_name %in% (fos_main %>% slice(2:11) %>% pull(field_of_study_name)), field_of_study_name, 'others') %>% factor())
author_main_fos <- tbl_author_dyn %>%
count(author_id, field_of_study_name, sort = TRUE) %>%
group_by(author_id) %>%
mutate(n = ifelse(field_of_study_name == 'others', 0, n)) %>%
arrange(author_id, desc(n)) %>%
slice(1:1) %>%
ungroup()
# Join with author static
tbl_author_stat %<>%
left_join(author_main_fos %>% select(author_id, field_of_study_name), by = 'author_id') %>%
replace_na(list(field_of_study_name = 'others'))
set.seed(1337)
library(MatchIt)
match_psm <- tbl_author_stat %>%
mutate(author_type = (author_type %>% factor() %>% as.numeric()) -1 ) %>%
drop_na()
match_psm  %<>% matchit(author_type ~ paper_mean + cit_mean + year_n + year_end + gender + field_of_study_name,
data = ., method = "nearest", ratio = 1)
summary(match_psm)
# Match table for use lateron
match_psm_out <- match_psm %>%
match.data() %>%
as_tibble() %>%
select(author_id, distance, weights)
# Create main data with restrictions on type
data <- tbl_author_dyn %>%
inner_join(tbl_author_stat %>% select(author_id, gender), by = 'author_id')
# Create some variables
data %<>%
group_by(author_id) %>%
mutate(seniority = year - min(year, na.rm = TRUE) + 1,
cit_n = cit_mean * paper_n,
cit_n_cum = cit_n %>% cumsum(),
citation_rank = cit_mean %>% percent_rank()) %>%
ungroup()
### Prepare for regression
data_surv <- data %>%
semi_join(match_psm_out, by = 'author_id') %>%
group_by(author_id) %>%
mutate(cit_n_cum = cit_n_cum %>% lag(1),
citation_rank = citation_rank %>% lag(1),
cent_dgr = cent_dgr %>% lag(1),
cent_dgr_ind = cent_dgr %>% lag(1),
dl_researcher = dl_researcher %>% lag(1),
field_of_study_name = field_of_study_name %>% lag(1)) %>%
ungroup() %>%
filter(year >= 2000) %>%
group_by(author_id) %>%
mutate(time = 1:n()) %>%
ungroup() %>%
mutate(year = year %>% factor) %>%
drop_na()
# other variables to try
data_surv %<>%
mutate(star = citation_rank >= 0.9)
# Surf object
surv_object <- Surv(time = data_surv$time, event = data_surv$transited)
fit_km0 <- survfit(surv_object ~ 1,
data = data_surv)
fit_km1 <- survfit(surv_object ~ star,
data = data_surv)
fit_km2 <- survfit(surv_object ~ dl_researcher,
data = data_surv)
fit_km3 <- survfit(surv_object ~ gender,
data = data_surv)
#p1 <- fit_km0 %>% ggsurvplot(data = data_surv, pval = TRUE) + labs(title= 'KM: baseline')
#p2 <- fit_km1 %>% ggsurvplot(data = data_surv, pval = TRUE) + labs(title= 'KM: Star citations')
#p3 <- fit_km2 %>% ggsurvplot(data = data_surv, pval = TRUE) + labs(title= 'KM: DL researcher')
#p4 <- fit_km3 %>% ggsurvplot(data = data_surv, pval = TRUE) + labs(title= 'KM: Gender')
p1 <- fit_km0 %>% autoplot() + labs(title= 'KM: baseline')
p2 <- fit_km1 %>% autoplot() + labs(title= 'KM: Star citations')
p3 <- fit_km2 %>% autoplot() + labs(title= 'KM: DL researcher')
p4 <- fit_km3 %>% autoplot() + labs(title= 'KM: Gender')
(p1 + p2) / (p3 + p4) +
plot_layout(guides = "collect") & theme(legend.position = 'bottom') & labs(x = 'Time', y = 'Survival Probability')
data_surv %>% skim()
### Fir Cox proportional hazard model
#Baseline
fit_cox0 <- coxph(surv_object ~ seniority + gender + field_of_study_name,
data = data_surv)
fit_cox1 <- coxph(surv_object ~ seniority + gender + field_of_study_name + dl_researcher,
data = data_surv)
fit_cox2 <- coxph(surv_object ~ seniority + gender + field_of_study_name + cent_dgr + cent_dgr_ind,
data = data_surv)
fit_cox3 <- coxph(surv_object ~ seniority + gender + field_of_study_name + paper_n + citation_rank + log(cit_n_cum + 1) ,
data = data_surv)
fit_cox4 <- coxph(surv_object ~ seniority + gender + field_of_study_name + dl_researcher + cent_dgr + cent_dgr_ind +  paper_n + citation_rank + log(cit_n_cum + 1),
data = data_surv)
# dl_researcher + cent_dgr + cent_dgr_ind + citation_rank + cit_n_cum + paper_n + ,
stargazer(fit_cox0, fit_cox1, fit_cox2, fit_cox3, fit_cox4, type = 'latex')
fit_cox4 %>% ggforest(data = data_surv)
data_surv %>% select(switch, affiliation, seniority, gender, dl_researcher, paper_n, citation_rank, cit_n_cum, cent_dgr, cent_dgr_ind) %>%
mutate(cit_n_cum = log(cit_n_cum + 1) %>% round(2)) %>% as.data.frame() %>%
stargazer(
#    type = 'html'
type = 'latex'
)
cormat <- data_surv %>% select(switch, affiliation, seniority, gender, dl_researcher, paper_n, citation_rank, cit_n_cum, cent_dgr, cent_dgr_ind) %>% corstarsl()
cormat %>% as.data.frame() %>% stargazer(
#  type = 'html',
type = 'latex',
summary = FALSE,
#          out="../../output/tab_corr_mat.tex",
label="tab:corr_mat",
title="Correlation Matrix",
notes="$^{*}$p$<$0.001",
notes.align = "l",
no.space=TRUE
)
library(GGally)
data_surv %>% select(author_type, paper_n, citation_rank, cit_n_cum, cent_dgr, cent_dgr_ind) %>% ggpairs(aes(alpha = 0.3,), ggtheme = theme_gray())
ggsave("fig_desc_matrix.png", path = '../../output/', device = 'png', width = 15, height = 15)
desc_author_stat <- readRDS('../../temp/tbl_author_type.rds')
desc_author_stat %<>%
left_join(tbl(con, "author_gender") %>% select(id, full_name, gender), by = c('author_id' = 'id'), copy = TRUE) %>%
replace_na(list(gender = 'male')) %>% # Strong assumption to get rid of NAs
mutate(gender = ifelse(gender == 'male', TRUE, FALSE))
desc_author_stat %<>%
filter(year_n >= 5 &
year_end >= 2015)
tbl_desc_author <- desc_author_stat %>%
select(author_type, paper_mean, cit_mean, year_n, gender) %>%
group_by(author_type) %>%
summarise(n = n(),
paper_mean = paper_mean %>% mean() %>% round(2),
cit_mean = cit_mean %>% mean() %>% round(2),
year_n = year_n %>% mean() %>% round(2),
gender = gender %>% mean() %>% round(2)) %>%
mutate(pct = n / sum(n) %>% round(2)) %>%
select(author_type, n, pct, everything())
tbl_desc_author %>% stargazer(summary = FALSE, rownames = FALSE)
data_surv %>%
filter(switch == TRUE) %>%
count(year) %>%
ungroup() %>%
arrange(year) %>%
mutate(year = year %>% as.character() %>% as.numeric()) %>%
filter(year <= 2018) %>%
ggplot(aes(x = year, y = n)) + geom_line()
ggsave("fig_timeline_switch.pdf", path = '../../output/', device = 'pdf', width = 10, height = 5)
data_surv %>% skim()
data_did <- data_surv %>%
group_by(author_id) %>%
mutate(switcher = max(transited),
transited_t = ifelse(transited == TRUE, 1, 0)) %>%
mutate(transited_t = transited_t + lag(transited_t, 1)) %>%
ungroup()
fit_did_blank <- lm(citation_rank ~ switcher, data = data_did)
fit_did_blank %>% summary()
fit_did_base <- lm(citation_rank ~ switcher + transited + seniority, data = data_did)
fit_did_base %>% summary()
fit_did_1 <- lm(citation_rank ~ switcher  + (transited + dl_researcher)^2 + seniority + transited_t + dl_researcher + gender +field_of_study_name, data = data_did)
fit_did_1 %>% summary()
library(interplot)
#library(interactions)
